#!/usr/bin/env python3
import requests
import json
from datetime import datetime
import logging
import base64

# Configuration
THEHIVE_URL = "http://192.168.100.25:9000"
THEHIVE_API_KEY = "hzwsftd/mfDR68blnzkb1jh0qBNyye6/"
ELASTICSEARCH_URL = "http://localhost:9200"
ELASTICSEARCH_INDEX = "entra-id-directoryaudit-logs1"
ELASTICSEARCH_USER = "elastic"
ELASTICSEARCH_PASS = "22709769"

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def get_elasticsearch_auth():
    auth_string = f"{ELASTICSEARCH_USER}:{ELASTICSEARCH_PASS}"
    return f"Basic {base64.b64encode(auth_string.encode()).decode()}"

def get_entra_id_logs():
    query = {
        "query": {
            "bool": {
                "must": [
                    {"exists": {"field": "modified_properties"}}
                ]
            }
        },
        "sort": [{"@timestamp": {"order": "desc"}}],
        "size": 100
    }
    try:
        headers = {
            "Content-Type": "application/json",
            "Authorization": get_elasticsearch_auth()
        }

        response = requests.post(
            f"{ELASTICSEARCH_URL}/{ELASTICSEARCH_INDEX}/_search",
            headers=headers,
            data=json.dumps(query),
            timeout=30
        )
        response.raise_for_status()
        return response.json().get("hits", {}).get("hits", [])
    except requests.exceptions.RequestException as e:
        logger.error(f"Erreur Elasticsearch : {str(e)}")
        if e.response:
            logger.error(f"Détails : {e.response.text}")
        return []

def format_alert_description(log_data):
    desc = [
        "Détails de l'événement Entra-ID :",
        f"Action : {log_data.get('action', 'Inconnue')}",
        f"Catégorie : {log_data.get('category', 'Inconnue')}",
        f"Utilisateur : {log_data.get('user_identifier', 'Inconnu')}",
        f"IP Source : {log_data.get('source_ip', 'Inconnue')}",
        f"Timestamp : {log_data.get('@timestamp', 'Inconnu')}",
        "",
        "Propriétés modifiées :"
    ]

    for prop in log_data.get('modified_properties', []):
        desc.append(
            f"- {prop.get('displayName', 'Inconnu')} : "
            f"de '{prop.get('oldValue', 'None')}' à '{prop.get('newValue', 'None')}'"
        )

    return "\n".join(desc)

def extract_artifacts(log_data):
    artifacts = []

    if log_data.get('source_ip'):
        artifacts.append({
            "dataType": "ip",
            "data": log_data['source_ip'],
            "message": "Adresse IP source",
            "tags": ["source_ip"],
            "tlp": 2
        })

    if log_data.get('user_identifier'):
        artifacts.append({
            "dataType": "user-agent",
            "data": log_data['user_identifier'],
            "message": "Identifiant utilisateur",
            "tags": ["user"],
            "tlp": 2
        })

    return artifacts

def create_thehive_alert(log_data):
    alert = {
        "title": f"Entra-ID Audit: {log_data.get('action', 'Unknown')}",
        "description": format_alert_description(log_data),
        "type": "external",  # Le type "EntraID Audit" personnalisé peut poser problème
        "source": "Elasticsearch",
        "sourceRef": log_data.get('id', str(datetime.now().timestamp())),
        "severity": 2,
        "date": int(datetime.now().timestamp() * 1000),
        "tags": ["EntraID", "DirectoryAudit"],
        "artifacts": extract_artifacts(log_data),
        "tlp": 2,
        "pap": 2
    }

    try:
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {THEHIVE_API_KEY}"
        }

        response = requests.post(
            f"{THEHIVE_URL}/api/v1/alert",
            headers=headers,
            json=alert,
            timeout=30
        )

        if response.status_code == 201:
            
            return response.json()
        else:
            logger.error(f"Erreur TheHive {response.status_code}: {response.text}")
            return None

    except requests.exceptions.RequestException as e:
        logger.error(f"Exception lors de la création d'une alerte : {str(e)}")
        return None

def main():
    logger.info("Démarrage du traitement...")

    try:
        test_response = requests.get(
            ELASTICSEARCH_URL,
            headers={"Authorization": get_elasticsearch_auth()},
            timeout=10
        )
        if test_response.status_code != 200:
            logger.error("Connexion à Elasticsearch échouée.")
            return
    except Exception as e:
        logger.error(f"Test de connexion Elasticsearch échoué : {str(e)}")
        return

    logs = get_entra_id_logs()
    logger.info(f"Nombre de logs trouvés : {len(logs)}")

    for i, log in enumerate(logs, 1):
        log_data = log.get('_source', {})
        logger.info(f"Traitement du log {i}/{len(logs)} - Action : {log_data.get('action')}")
        result = create_thehive_alert(log_data)
        if result:
            logger.info(f"Alerte créée avec ID : {result.get('_id')}")
        else:
            logger.warning("Alerte non créée.")

if __name__ == "__main__":
    main()
